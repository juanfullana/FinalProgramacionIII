package Logica;

import java.util.Scanner;
import java.util.Random;
import utnydragones.criaturas.*;

public class Combate {
    private final Guerrero jugador;
    private final Criatura enemigo;
    private final RegistroPartida registro;
    private final String nombreGuerreroElegido;
    private int rondas = 0;
    private int danioTotalJugador = 0;
    private int danioTotalEnemigo = 0;
    private boolean guerreroElegidoRegistrado = false;  // Nuevo atributo
    private int danioEspecialJugador = 0;

    public Combate(Guerrero jugador, Criatura enemigo) {
        this.jugador = jugador;
        this.enemigo = enemigo;
        this.nombreGuerreroElegido = jugador.getNombre();
        this.registro = new RegistroPartida();
        this.registrarInicioCombate();  // Nuevo método para registrar el inicio del combate
    }

    public void iniciarCombate() {
        System.out.println("\n---- COMBATE ----");
        System.out.println("Te enfrentas a un " + enemigo.getNombre() + ".");
        chequeoPercepcion();

        while (jugador.getSalud() > 0 && enemigo.getSalud() > 0) {
            rondas++;

            mostrarOpcionesCombate();
            int opcion = obtenerOpcionUsuario();

            switch (opcion) {
                case 1:
                    // Atacar
                    realizarAtaque(jugador, enemigo);
                    break;
                case 2:
                    // Habilidad especial
                    jugador.usarHabilidadEspecial(enemigo);
                    break;
                default:
                    System.out.println("Opción inválida. Inténtalo de nuevo.");
                    break;
            }

            realizarTurnoJugador();

            if (enemigo.getSalud() > 0) {
                // Turno del enemigo
                realizarAtaque(enemigo, jugador);
            }

            if (enemigo.getSalud() <= 0) {
                System.out.println("¡Has derrotado al " + enemigo.getNombre() + "!");
                ofrecerMejoraDespuesEnemigo();
                //registrarFinCombate();
                break;
            }

            // Verificar si el jugador ha sido derrotado
            if (jugador.getSalud() <= 0) {
                System.out.println("¡Has sido derrotado por el " + enemigo.getNombre() + "!");
                //registrarFinCombate();
                break;
            }
        }
    }

    private void mostrarOpcionesCombate() {
        System.out.println("Opciones de Logica.Combate:");
        System.out.println("1. Atacar");
        System.out.println("2. Habilidad Especial");
    }

    private void realizarTurnoJugador() {
        if (enemigo.getSalud() > 0) {
            Scanner scanner = new Scanner(System.in);
            int opcion = 0;

            while (opcion < 1 || opcion > 2) {
                System.out.print("Elige una opción (1-2): ");
                try {
                    opcion = Integer.parseInt(scanner.nextLine());
                    if (opcion < 1 || opcion > 2) {
                        System.out.println("Por favor, ingresa una opción válida.");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Por favor, ingrese un número válido.");
                }
            }

            // Realizar acciones del jugador según la opción elegida
            switch (opcion) {
                case 1:
                    // Atacar
                    realizarAtaque(jugador, enemigo);
                    break;
                case 2:
                    // Habilidad especial
                    int danioHabilidadEspecial = jugador.usarHabilidadEspecial(enemigo);
                    danioTotalJugador += danioHabilidadEspecial; // Actualiza el daño total con la habilidad especial
                    danioEspecialJugador += danioHabilidadEspecial; // Actualiza el daño especial
                    break;
                default:
                    System.out.println("Opción inválida. Se termina tu turno.");
                    break;
            }

            // Verificar si el enemigo ha sido derrotado después del turno del jugador
            if (enemigo.getSalud() <= 0) {
                System.out.println("¡Has derrotado al " + enemigo.getNombre() + "!");
                registrarFinCombate();
                return;
            }

            // Turno del enemigo solo si el enemigo sigue vivo
            realizarAtaque(enemigo, jugador);

            // Verificar si el jugador ha sido derrotado después del turno del enemigo
            if (jugador.getSalud() <= 0) {
                System.out.println("¡Has sido derrotado por el " + enemigo.getNombre() + "!");
                registrarFinCombate();
                return;
            }
        } else {
            // Si el enemigo está derrotado, mostrar el mensaje y registrar el fin del combate
            System.out.println("¡Has derrotado al " + enemigo.getNombre() + "!");
            registrarFinCombate();
        }
    }

    private void realizarAtaque(Criatura atacante, Criatura objetivo) {
        int dano = calcularDano(atacante, objetivo);
        objetivo.reducirSalud(dano);

        System.out.println(atacante.getNombre() + " ataca a " + objetivo.getNombre() + " y le inflige " + dano + " de daño.");
        System.out.println(objetivo.getNombre() + " tiene ahora " + objetivo.getSalud() + " de salud.");

        // Incrementar la energía después de un ataque normal
        atacante.incrementarEnergia(Criatura.ENERGIA_GENERADA_ATACAR);

        // Actualizar estadísticas de daño total
        if (atacante == jugador) {
            danioTotalJugador += dano;
        } else {
            danioTotalEnemigo += dano;
        }
    }

    private int calcularDano(Criatura atacante, Criatura objetivo) {
        if (atacante instanceof Barbaro) {
            Barbaro barbaro = (Barbaro) atacante;
            return barbaro.calcularDano(objetivo);
        } else {
            // Calcula el daño para otras criaturas que no sean el Barbaro
            double danoCalculado = (atacante.getAtaque() + 0.5 * atacante.getVelocidad()) - objetivo.getDefensa();

            // Verifica la evasión
            Random random = new Random();
            double probabilidadEvasion = objetivo.getEvasion() / 100.0; // Convertir a porcentaje
            double resultadoEvasion = random.nextDouble();

            if (resultadoEvasion <= probabilidadEvasion) {
                // El ataque fue evadido
                System.out.println("¡" + objetivo.getNombre() + " ha evadido el ataque!");
                return 0; // No hay daño
            } else {
                // El ataque no fue evadido completamente
                return Math.max(0, (int) danoCalculado);
            }
        }
    }

    private void chequeoPercepcion() {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        System.out.println("Realizas un chequeo de percepción antes del combate.");

        // Simular tirar un dado de 20 caras
        int resultadoDado = random.nextInt(20) + 1;

        System.out.println("Resultado del chequeo de percepción: " + resultadoDado);

        if (resultadoDado == 1) {
            // Si saca 1, recibe 15 de daño
            System.out.println("¡Has tropezado con una trampa! Recibes 15 de daño.");
            jugador.reducirSalud(15);
        } else if (resultadoDado <= 5) {
            // Si saca entre 2 y 5, muestra la salud de la criatura enemiga
            System.out.println("Obtienes información sobre la salud del " + enemigo.getNombre() + ": " + enemigo.getSalud());
        } else if (resultadoDado <= 10) {
            // Si saca entre 6 y 10, muestra la salud y la defensa
            System.out.println("Obtienes información sobre el " + enemigo.getNombre() +
                    ": Salud " + enemigo.getSalud() + ", Defensa " + enemigo.getDefensa());
        } else if (resultadoDado <= 15) {
            // Si saca entre 11 y 15, muestra la salud, la defensa y el ataque
            System.out.println("Obtienes información detallada sobre el " + enemigo.getNombre() +
                    ": Salud " + enemigo.getSalud() + ", Defensa " + enemigo.getDefensa() +
                    ", Ataque " + enemigo.getAtaque());
        } else {
            // Si saca entre 16 y 20, muestra todas las estadísticas
            System.out.println("Obtienes información completa sobre el " + enemigo.getNombre() +
                    ": Salud " + enemigo.getSalud() + ", Defensa " + enemigo.getDefensa() +
                    ", Ataque " + enemigo.getAtaque() + ", Velocidad " + enemigo.getVelocidad() +
                    ", Energía " + enemigo.getEnergia() + ", Evasión " + enemigo.getEvasion());
        }
    }

    private int obtenerOpcionUsuario() {
        Scanner scanner = new Scanner(System.in);
        int opcion = 0;

        while (true) {
            System.out.print("Elige una opción (1-2): ");
            try {
                opcion = Integer.parseInt(scanner.nextLine());

                if (opcion == 1 || opcion == 2) {
                    break;  // Salir del bucle si la opción es válida
                } else {
                    System.out.println("Por favor, ingresa una opción válida (1 o 2).");
                }
            } catch (NumberFormatException e) {
                System.out.println("Por favor, ingrese un número válido.");
            }
        }

        return opcion;
    }

    private void ofrecerMejoraGhoul() {
        System.out.println("Una presencia mágica se hace presente en la habitación y te ofrece una mejora.");

        System.out.println("Opciones de mejora:");
        System.out.println("1. Unos guantes que mejoran la defensa en 2 puntos.");
        System.out.println("2. Unas botas que mejoran la evasión en 4 puntos.");

        System.out.print("Elige una opción (1-2): ");

        int opcionMejora = obtenerOpcionUsuario();

        switch (opcionMejora) {
            case 1:
                mejorarDefensa();
                break;
            case 2:
                mejorarEvasion();
                break;
            default:
                System.out.println("Opción inválida. No se realiza ninguna mejora.");
                break;
        }
    }

    private void ofrecerMejoraEsqueleto() {
        System.out.println("Buscas entre los restos de tu compañero y encuentras un botín, solo puedes llevarte uno.");

        System.out.println("Opciones de mejora:");
        System.out.println("1. Un anillo que mejora la salud en 10 puntos.");
        System.out.println("2. Un collar que aumenta la energía en 40 puntos.");

        System.out.print("Elige una opción (1-2): ");

        int opcionMejora = obtenerOpcionUsuario();

        switch (opcionMejora) {
            case 1:
                mejorarSalud();
                break;
            case 2:
                mejorarEnergia();
                break;
            default:
                System.out.println("Opción inválida. No se realiza ninguna mejora.");
                break;
        }
    }

    private void ofrecerMejoraFantasma() {
        System.out.println("El espíritu comienza a rodearte");
        mejorarAtaque();
        System.out.println("El daño de tu arma se ha incrementado!");
    }

    private void mejorarDefensa() {
        System.out.println("Te has equipado con unos guantes que mejoran la defensa en 2 puntos. ¡Efecto permanente!");
        jugador.setDefensa(jugador.getDefensa() + 2);
    }

    private void mejorarEvasion() {
        System.out.println("Te has equipado con unas botas que mejoran la evasión en 4 puntos. ¡Efecto permanente!");
        jugador.setEvasion(jugador.getEvasion() + 4);
    }

    private void mejorarSalud() {
        System.out.println("Te has equipado un anillo que mejora la salud en 10 puntos.");
        jugador.setSalud(jugador.getSalud() + 10);
    }

    private void mejorarEnergia() {
        System.out.println("Te has equipado un collar que mejora la energía en 40 puntos");
        jugador.setEnergia(jugador.getEnergia() + 40);
    }

    private void mejorarAtaque() {
        System.out.println("Tu arma ha sido imbuida por el espíritu de tu compañero, quien te acompañará en tu aventura");
        jugador.setAtaque(jugador.getAtaque() + 10);
    }

    private void ofrecerMejoraDespuesEnemigo() {
        if (enemigo instanceof Ghoul) {
            ofrecerMejoraGhoul();
        } else if (enemigo instanceof Esqueleto) {
            ofrecerMejoraEsqueleto();
        } else if (enemigo instanceof Fantasma) {
            ofrecerMejoraFantasma();
        }
    }
    private void registrarInicioCombate() {
        if (!guerreroElegidoRegistrado) {
            RegistroPartida.registrarEvento("Guerrero elegido: " + nombreGuerreroElegido);
            guerreroElegidoRegistrado = true;
        }
    }
    public void registrarFinCombate() {
        // Información general del combate
        RegistroPartida.registrarEvento("Combate vs " + enemigo.getNombre());
        RegistroPartida.registrarEvento("Total de rondas: " + rondas);
        RegistroPartida.registrarEvento("Total de daño recibido en este combate: " + danioTotalEnemigo);
        RegistroPartida.registrarEvento("Total de daño infligido en este combate: " + danioTotalJugador);
        RegistroPartida.registrarEvento("Total de daño especial infligido en este combate: " + danioEspecialJugador);

        // Mejora elegida
        //RegistroPartida.registrarEvento("Mejora elegida después de derrotar a " + enemigo + ": " + obtenerMejoraElegida(enemigo));

        // Separador para facilitar la lectura del log
        RegistroPartida.registrarEvento("------------------------------");

        // Reiniciar estadísticas para el próximo combate
        rondas = 0;
        danioTotalJugador = 0;
        danioTotalEnemigo = 0;
    }

}



-------------JUEGO---------------------------
package Logica;

import java.util.Scanner;
    import utnydragones.criaturas.*;

    public class Juego {
        private Guerrero jugador;

        private void mostrarBienvenida() {
            System.out.println(" #     # ####### #     #    #     #    ######  ######     #     #####  ####### #     # #######  #####  ");
            System.out.println(" #     #    #    ##    #     #   #     #     # #     #   # #   #     # #     # ##    # #       #     # ");
            System.out.println(" #     #    #    # #   #      # #      #     # #     #  #   #  #       #     # # #   # #       #       ");
            System.out.println(" #     #    #    #  #  #       #       #     # ######  #     # #  #### #     # #  #  # #####    #####  ");
            System.out.println(" #     #    #    #   # #       #       #     # #   #   ####### #     # #     # #   # # #             # ");
            System.out.println(" #     #    #    #    ##       #       #     # #    #  #     # #     # #     # #    ## #       #     # ");
            System.out.println("  #####     #    #     #       #       ######  #     # #     #  #####  ####### #     # #######  #####  ");
            System.out.println();
        }

        private boolean preguntarInstructivo() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("¿Desea leer un instructivo antes de jugar? (SI/NO): ");
            String respuesta = scanner.nextLine().toUpperCase();
            return respuesta.equals("SI");
        }

        private void mostrarInformacion() {
            // Información adicional
            System.out.println("---- INFORMACIÓN ----");
            System.out.println("Este es un juego de rol que cuenta con los aspectos básicos de los mismos.");
            System.out.println("Usted elegirá un personaje de entre 3 posibilidades:");
            System.out.println("1. Bárbaro - Especialista en daño y brutalidad");
            System.out.println("2. Paladin - Guerrero equilibrado especialista en las artes sagradas");
            System.out.println("3. Mago - Enigmático ser especialista en las artes elementales");

            System.out.println("\n---- OBJETIVO ----");
            System.out.println("El objetivo del juego es derrotar a las 4 criaturas que encontrará en las salas de este calabozo.");
            System.out.println("El calabozo es progresivo y lineal. Cada oponente que derrote le otorgará beneficios para los combates venideros.");
            System.out.println("Escójalos con cuidado.");
            System.out.println();
        }

        private Guerrero elegirPersonaje() {
            Scanner scanner = new Scanner(System.in);

            System.out.println("\n---- ELEGIR PERSONAJE ----");
            System.out.println("Seleccione un personaje:");
            System.out.println("1. Bárbaro");
            System.out.println("2. Paladin");
            System.out.println("3. Mago");

            int opcion = 0;
            while (opcion < 1 || opcion > 3) {
                System.out.print("Ingrese el número de su elección: ");
                try {
                    opcion = Integer.parseInt(scanner.nextLine());
                } catch (NumberFormatException e) {
                    System.out.println("Por favor, ingrese un número válido.");
                }
            }

            Guerrero jugador = null;

            // Crear el personaje seleccionado por el jugador
            switch (opcion) {
                case 1:
                    jugador = new Barbaro();
                    break;
                case 2:
                    jugador = new Paladin();
                    break;
                case 3:
                    jugador = new Mago();
                    break;
                default:
                    break;
            }

            System.out.println("Has seleccionado a " + jugador.getNombre() + ". ¡Que comience la aventura!\n");
            return jugador;
        }

        private void mostrarEstadisticasPersonaje(Criatura jugador) {
            // Mostrar las estadísticas del personaje seleccionado
            System.out.println("\n---- ESTADÍSTICAS DEL PERSONAJE ----");
            System.out.println("Nombre: " + jugador.getNombre());
            System.out.println("Salud: " + jugador.getSalud());
            System.out.println("Ataque: " + jugador.getAtaque());
            System.out.println("Defensa: " + jugador.getDefensa());
            System.out.println("Velocidad: " + jugador.getVelocidad());
            System.out.println("Energía: " + jugador.getEnergia());
            System.out.println("Evasión: " + jugador.getEvasion());

            // Mensaje de advertencia
            System.out.println("\nCopia esta información en un papel, ya que es de vital importancia y no podrás consultarla hasta después de haber elegido un beneficio.");
        }
        private void relatoPrimeraSala() {
            System.out.println("\n---- PRIMERA SALA ----");
            System.out.println("Al entrar en la primera sala, te encuentras con una escena macabra.");
            System.out.println("Un Ghoul se está alimentando del cadáver de uno de tus compañeros caídos.");

            // Generar relato basado en el tipo de personaje seleccionado
            if (jugador instanceof Barbaro) {
                System.out.println("Enceguecido por la furia, cargas contra el Ghoul con determinación.");
            } else if (jugador instanceof Paladin) {
                System.out.println("Tras rezar por el alma de tu compañero, te enfrentas al Ghoul con la determinación de vengar a tu camarada caído.");
            } else if (jugador instanceof Mago) {
                System.out.println("Te lamentas por la pérdida, pero reconoces que ahora el botín será solo para ti.");
            }
        }

        public void comenzarJuego() {
            mostrarBienvenida();

            if (preguntarInstructivo()) {
                mostrarInformacion();
            }

            jugador = elegirPersonaje();
            System.out.println("Guerrero elegido: " + jugador.getNombre() + ".");
            System.out.println("------------------------------");
            RegistroPartida.registrarEvento("Guerrero elegido: " + jugador.getNombre() + ".");
            mostrarEstadisticasPersonaje(jugador);

            // Mostrar el tipo de guerrero elegido una sola vez al principio
            System.out.println("Guerrero elegido: " + jugador.getNombre());

            // Relato de la primera sala
            relatoPrimeraSala();
            // Combate contra un Ghoul
            Combate combateGhoul = new Combate(jugador, new Ghoul());
            combateGhoul.iniciarCombate();
            // Obtener mejora después de derrotar al Ghoul
            obtenerMejoraDespuesEnemigo(jugador, new Ghoul());
            mostrarEstadisticasPersonaje(jugador);
            Guerrero.reiniciarContadorHabilidadEspecial();
            // Combate contra un Esqueleto
            Combate combateEsqueleto = new Combate(jugador, new Esqueleto());
            combateEsqueleto.iniciarCombate();
            // Obtener mejora después de derrotar al Esqueleto
            obtenerMejoraDespuesEnemigo(jugador, new Esqueleto());
            mostrarEstadisticasPersonaje(jugador);
            Guerrero.reiniciarContadorHabilidadEspecial();
            // Combate contra un Fantasma
            Combate combateFantasma = new Combate(jugador, new Fantasma());
            combateFantasma.iniciarCombate();
            // Obtener mejora después de derrotar al Fantasma
            obtenerMejoraDespuesEnemigo(jugador, new Fantasma());
            mostrarEstadisticasPersonaje(jugador);
            //Guerrero.reiniciarContadorHabilidadEspecial();
            // Combate contra el Demonio
            Combate combateDemonio = new Combate(jugador, new Demonio());
            combateDemonio.iniciarCombate();
            // Obtener mejora después de derrotar al Demonio
            obtenerMejoraDespuesEnemigo(jugador, new Demonio());
        }
        private void obtenerMejoraDespuesEnemigo(Guerrero jugador, Criatura enemigo) {
            if (enemigo instanceof Ghoul) {
                mostrarMensajeDespuesMejoraGhoul(jugador);
            } else if (enemigo instanceof Esqueleto) {
                mostrarMensajeDespuesMejoraEsqueleto(jugador);
            } else if (enemigo instanceof Fantasma) {
                mostrarMensajeDespuesMejoraFantasma(jugador);
            } else if (enemigo instanceof Demonio) {
                mostrarMensajeDespuesMejoraDemonio(jugador);
            }
        }


        void mostrarMensajeDespuesMejoraGhoul(Guerrero jugador) {
            // Mensaje narrativo después de la mejora
            System.out.println("Mientras te terminas de colocar los guantes, sientes una figura alzándose detrás de ti.");

            // Mensajes específicos según la clase del jugador
            if (jugador instanceof Barbaro) {
                System.out.println("Es el cuerpo reanimado de tu compañero bárbaro. Te sientes honrado de darle descanso eterno a su compañero.");
            } else if (jugador instanceof Paladin) {
                System.out.println("Es el cuerpo reanimado de tu compañero paladín. Con mucho pesar, acabarás con quien fue su amigo.");
            } else if (jugador instanceof Mago) {
                System.out.println("Es el cuerpo reanimado de tu compañero mago. Hasta muerto te sigue fastidiando.");
            }

        }

        void mostrarMensajeDespuesMejoraEsqueleto(Guerrero jugador) {
            // Mensaje narrativo después de la mejora
            System.out.println("Habiéndote colocado la joya, una extraña figura comienza a emerger de los restos de tu difunto compañero.");

            // Mensajes específicos según la clase del jugador
            if (jugador instanceof Barbaro) {
                System.out.println("Es un espíritu, optimista, crees que es el de tu compañero, a quien acabas de liberar del eterno tormento.");
            } else if (jugador instanceof Paladin) {
                System.out.println("Es un espíritu, optimista, crees que es el de tu compañero, a quien acabas de liberar del eterno tormento.");
            } else if (jugador instanceof Mago) {
                System.out.println("Es el espíritu de tu compañero mago. Verdaderamente un fastidio, ni muerto muere.");

                // Registrar evento en el log
                RegistroPartida.registrarEvento("Mejora elegida después de derrotar a un Esqueleto: Anillo que mejora la salud en 10 puntos.");
                RegistroPartida.registrarEvento("Mensaje narrativo: Habiéndote colocado la joya, una extraña figura comienza a emerger de los restos de tu difunto compañero.");
                RegistroPartida.registrarEvento("Mensaje específico para Mago: Es el espíritu de tu compañero mago. Verdaderamente un fastidio, ni muerto muere.");
            }
        }

        void mostrarMensajeDespuesMejoraFantasma(Guerrero jugador) {
            // Mensajes específicos según la clase del jugador
            if (jugador instanceof Barbaro) {
                System.out.println("Juntos hasta el final, compañero.");
            } else if (jugador instanceof Paladin) {
                System.out.println("Que tu luz me guíe, compañero.");
            } else if (jugador instanceof Mago) {
                System.out.println("Ya no sé cómo deshacerme de ti.");

                // Registrar evento en el log
                RegistroPartida.registrarEvento("Mejora elegida después de derrotar a un Fantasma: Mejora de ataque.");
                RegistroPartida.registrarEvento("Mensaje narrativo: El espíritu comienza a rodearte.");
                RegistroPartida.registrarEvento("Mensaje específico para Mago: Ya no sé cómo deshacerme de ti.");
            }
        }

        void mostrarMensajeDespuesMejoraDemonio(Guerrero jugador) {
            // Mensajes específicos según la clase del jugador
            if (jugador instanceof Barbaro) {
                System.out.println("La fuerza prevalece, siempre.");
            } else if (jugador instanceof Paladin) {
                System.out.println("La luz siempre triunfará.");
            } else if (jugador instanceof Mago) {
                System.out.println("Esos cuernos deben valer bien caro.");
            }
        }

    }